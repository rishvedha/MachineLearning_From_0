{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOa42UK2Eew9jt2bgfDDLQj"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["#importing data header files\n","import re\n","import string\n","import numpy as np\n","import pandas as pd\n","import joblib\n","from sklearn.model_selection import train_test_split, cross_val_score\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.naive_bayes import MultinomialNB\n","from sklearn.pipeline import Pipeline\n","from sklearn.metrics import accuracy_score, classification_report"],"metadata":{"id":"xQ4ha5BjjV3i"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Load dataset\n","df = pd.read_csv(\"spam_ham_dataset.csv\")"],"metadata":{"id":"kQN4vglAjk-J"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Text preprocessing function\n","def preprocess_text(text):\n","    text = text.lower()  # Convert to lowercase\n","    text = re.sub(r'\\d+', '', text)  # Remove numbers\n","    text = text.translate(str.maketrans('', '', string.punctuation))  # Remove punctuation\n","    text = text.strip()  # Trim spaces\n","    return text\n"],"metadata":{"id":"YAJPzc4UkFCi"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7Lxmd_bKcgle","executionInfo":{"status":"ok","timestamp":1743665609822,"user_tz":-330,"elapsed":4753,"user":{"displayName":"RISHVEDHA M","userId":"13635254060816532723"}},"outputId":"fa07977f-a536-49ee-a58d-b53981521d92"},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9487922705314009\n","\n","\n","              precision    recall  f1-score   support\n","\n","           0       0.97      0.96      0.96       735\n","           1       0.90      0.93      0.91       300\n","\n","    accuracy                           0.95      1035\n","   macro avg       0.93      0.94      0.94      1035\n","weighted avg       0.95      0.95      0.95      1035\n","\n","Cross-validation accuracy: 0.9580367972042347\n"]}],"source":["# Apply preprocessing\n","df['text'] = df['text'].apply(preprocess_text)\n","df['label'] = df['label'].map({'ham': 0, 'spam': 1})  # Convert labels to binary\n","\n","# Split data\n","X_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], test_size=0.2, random_state=42, stratify=df['label'])\n","\n","# TF-IDF Vectorization + Na√Øve Bayes Classifier\n","pipeline = Pipeline([\n","    ('tfidf', TfidfVectorizer(stop_words='english', max_features=5000)),\n","    ('clf', MultinomialNB())\n","])\n","\n","# Train the model\n","pipeline.fit(X_train, y_train)\n","\n","# Evaluate model\n","y_pred = pipeline.predict(X_test)\n","print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n","print(\"\\n\")\n","print(classification_report(y_test, y_pred))\n","\n","# Cross-validation\n","scores = cross_val_score(pipeline, df['text'], df['label'], cv=5)\n","print(\"Cross-validation accuracy:\", np.mean(scores))\n","\n","# Save the trained model\n","joblib.dump(pipeline, \"spam_detector.pkl\")\n","\n","# Function to predict new messages\n","def predict_message(msg):\n","    model = joblib.load(\"spam_detector.pkl\")\n","    return \"Spam\" if model.predict([preprocess_text(msg)])[0] else \"Ham\"\n"]}]}